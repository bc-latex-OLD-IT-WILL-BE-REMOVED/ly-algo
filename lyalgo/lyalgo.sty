% ------------------- %
% -- Packages used -- %
% ------------------- %

% Beautiful and easy to use algorithms

\usepackage[french, vlined]{algorithm2e}


% Pour les nouvelles fonctions mathméatiques

\usepackage{amsmath}
\usepackage{amssymb}


% Verbatim like

\usepackage{alltt}


% Frames

\usepackage{tcolorbox}
\tcbuselibrary{breakable}


% Flow charts via TiKz

\usepackage{tikz}
\usetikzlibrary{shapes, arrows, calc, positioning}

% TeX programming

\usepackage{xint}
\usepackage{ifthen}
\usepackage{pgffor}










% -------------------------------------- %
% -- Settings and additional features -- %
% -------------------------------------- %

% TiKz - Flow charts styles ???????????????
%
%\tikzset{
%	decision/.style={
%		diamond,
%		draw,
%		fill=green!20,
%		text width=5.5em,
%		text badly centered,
%		node distance=2.5cm,
%		inner sep=0pt
%	},
%	block/.style={
%		rectangle,
%		draw,
%		fill=blue!20,
%		text width=5.5em,
%		text centered,
%		node distance=2.5cm,
%		rounded corners,
%		minimum height=2em
%	},
%	loop/.style={
%		rectangle,
%		draw,
%		fill=green!20,
%    	text width=5.5em,
%		text centered,
%		node distance=2.5cm,
%		rounded corners,
%		minimum height=2em
%	},
%	line/.style={
%		draw,
%		-latex'
%	},
%	cloud/.style={
%		draw,
%		ellipse,
%		fill=red!20,
%		node distance=2.5cm,
%    	text width=6.5em,
%		text centered,
%		minimum height=2em
%	}
%}
%
%
%
%
%
%
%
%
%
%






% algorithm2e - Captions

% Source
%	* https://tex.stackovernet.com/fr/q/66875#214011
%	* https://tex.stackexchange.com/a/510498/6880

\renewcommand{\@algocf@capt@plain}{above}
\renewcommand{\algocf@caption@plain}{\box\algocf@capbox\vskip\AlCapSkip}%

\setlength{\AlCapSkip}{.1em}


\newcommand\algovoidcaption{
	\SetAlgoCaptionSeparator{}	% no separator, default colon
	\SetAlCapNameSty{}			% no caption text
	\caption{}
}


% Verbatim - Frames

\newenvironment{pseudoverb*}
	{\small\alltt}
	{\endalltt\normalsize}


\newenvironment{pseudoverb}[2][1]{
	\centering
	\begin{tcolorbox}[
		width        = #1\linewidth,
		title        = #2,
		fonttitle    = \bfseries\itshape\small,
		coltitle     = black,
		colbacktitle = black!10!white,
		colback      = white,
		breakable,
		center title]
	\begin{pseudoverb*}
}{
	\end{pseudoverb*}
	\vspace{-1.25em}
	\end{tcolorbox}
}


% Algo - Frames

\newenvironment{algo*}
	{\begin{algorithm}[H]}
	{\end{algorithm}}


\newenvironment{algo}[1][1]{
	\centering
	\begin{tcolorbox}[
		colback = white,
		width=#1\linewidth,
		breakable
	]
	\begin{algo*}
}{
	\end{algo*}
	\vspace{-0.5em}
	\end{tcolorbox}
}


\newcommand\addalgoblank[1][]{
   \ifthenelse{ \equal{#1}{} }
      	{\vspace{.2em}}
      	{\foreach \n in {0,...,#1}{\vspace{.2em}}}
}


% Algo - Additional semantic macros - Lists

\newcommand\List[1]{\left[ \, #1 \, \right]}
\newcommand\EmptyList{\List{}}

\newcommand\ListElt[2]{#1\List{#2}}
\newcommand\ListUntil[2]{#1\List{..\,#2}}
\newcommand\ListFrom[2]{#1\List{#2\,..}}

\DeclareMathOperator{\Len}{taille}
\newcommand\POOpoint{\,\textbf{.}\,}


\newcommand\AddList{\mathbin{\boxplus}}


\newcommand\Append{\@ifstar{\@Append@star}{\@Append@no@star}}

\newcommand\@Append@no@star[2]{Ajouter le nouvel élément #2 après la fin de la liste #1.}

\newcommand\@Append@star{\@ifstar{\@Append@star@star}{\@Append@single@star}}

\newcommand\@Append@single@star[2]{$#1$\POOpoint{}ajouter-droite($#2$)}
\newcommand\@Append@star@star[2]{$#1 \Store #1 \AddList \List{#2}$}


\newcommand\Prepend{\@ifstar{\@Prepend@star}{\@Prepend@no@star}}

\newcommand\@Prepend@no@star[2]{Ajouter le nouvel élément #2 avant le début de la liste #1.}

\newcommand\@Prepend@star{\@ifstar{\@Prepend@star@star}{\@Prepend@single@star}}

\newcommand\@Prepend@single@star[2]{$#1$\POOpoint{}ajouter-gauche($#2$)}

\newcommand\@Prepend@star@star[2]{$#1 \Store \List{#2} \AddList #1$}


\newcommand\PopAt{\@ifstar{\@PopAt@star}{\@PopAt@no@star}}

\newcommand\@PopAt@no@star[2]{Élément à la position #2 dans la liste #1, cet élément étant retiré de la liste.}

\newcommand\@PopAt@star{\@ifstar{\@PopAt@star@star}{\@PopAt@single@star}}

\newcommand\@PopAt@single@star[2]{$#1$\POOpoint{}extraire($#2$)}


\newcommand\@add@one[2]{%
	\setbox0=\hbox{#2\unskip}\ifdim\wd0=0pt%
		\if\relax\detokenize\expandafter{\romannumeral-0#1}\relax%
			\the\numexpr #1+1 \relax%
		\else%
			#1 + 1%
		\fi%
	\else%
		#2%
	\fi%
}

\newcommand\@minus@one[2]{%
	\if\relax\detokenize\expandafter{\romannumeral-0#2}\relax%
			\def\minusone{\the\numexpr #2-1 \relax}%
			\xintiiifNotZero{\minusone}{%
				 \ListUntil{#1}{\minusone} \AddList%
			}{}%
		\else%
			\ListUntil{#1}{#2 - 1} \AddList%
		\fi%
}

\newcommand\@PopAt@star@star[3][]{%
	$#2%
	\Store%
	\@minus@one{#2}{#3}%	
	\ListFrom{#2}{\@add@one{#3}{#1}}$%
}


\newcommand\KeepLR[3]{$#1 \Store \ListUntil{#1}{#2} \AddList \ListFrom{#1}{#3}$}
\newcommand\KeepR[2]{$#1 \Store \ListFrom{#1}{#2}$}
\newcommand\KeepL[2]{$#1 \Store \ListUntil{#1}{#2}$}




% Algo - Additional semantic macros - General

\newcommand\Store{\leftarrow}
\newcommand\PutIn{\rightarrow}


\newcommand\ForRange{\@ifstar{\@ForRange@star}{\@ForRange@no@star}}

\newcommand\@ForRange@star[4]{
	\For{\text{$#1$} \KwFrom \text{$#2$} \KwTo \text{$#3$}}{#4}
}

\newcommand\@ForRange@no@star[4]{
	\For{\text{$#1$} \KwComingFrom \text{$#2$} \KwGoingTo \text{$#3$}}{#4}
}


% Algo - Language Settings

%%%% Comment

\SetKwComment{Comment}{{\# }}{}

%%%% General 1

\SetKwBlock{Actions}{Actions}{}
\SetKwBlock{Begin}{Début}{}

\SetKwInput{In}{Entrée}
\SetKwInput{Out}{Sortie}
\SetKwInput{Out}{Sortie}

\SetKwInput{Data}{Donnée}
\SetKwInput{Datas}{Données}

\SetKwInput{Result}{Résultat}
\SetKwInput{Results}{Résultats}

%%%% General 2

\SetKw{KwFrom}{de}
\SetKw{KwTo}{à}

\SetKw{KwComingFrom}{allant de}
\SetKw{KwGoingTo}{jusqu'à}

\SetKw{KwInList}{dans}
\SetKw{KwLeftToRight}{{parcourue de gauche à droite}}

\SetKw{Return}{Renvoyer}
\SetKw{Print}{Afficher}

%%%% Loop

\SetKwFor{For}%
    {Pour}{:}{}
\SetKwFor{ForAll}%
    {{Pour Tout}}{:}{}
\SetKwFor{ForEach}%
    {{Pour Chaque}}{:}{}
\SetKwFor{While}%
    {{Tant Que}}{:}{}
\SetKwRepeat{Repeat}%
    {Répéter}{{Jusqu'à Avoir}}

%%%% Test

\SetKw{And}{et}
\SetKw{Or}{ou}

\SetKwSwitch{Switch}{Case}{Other}%
	{Suivant}{:}{Cas}{Autre}{:}

\SetKwIF{If}{ElseIf}{Else}%
    {Si}{:}{{Sinon Si}}{{Sinon\,:}}{}
